/*==============================================================================

   頂点管理 [lane.cpp]
														 Author :
														 Date   :
--------------------------------------------------------------------------------

==============================================================================*/
#include "texture.h"
#include "sprite.h"
#include "sound.h"
#include "main.h"
#include "lane.h"
#include "player.h"


//*****************************************************************************
// マクロ定義
//*****************************************************************************

enum DIRECTION	//移動の向き
{
	D_LEFT = 0,
	D_RIGHT = 1,
};
enum CHECK		//タイミング評価
{
	C_NONE = 0,
	C_GOOD = 1,
	C_BAD = 2,
};


//*****************************************************************************
// グローバル変数
//*****************************************************************************
static int g_TextureLane;			//テクスチャのやつ
static LANE g_Lane[5];

//=============================================================================
// 初期化処理
//=============================================================================
void InitLane(void)
{

	g_TextureLane = LoadTexture((char*)"data/TEXTURE/lane_new.png");
	//初期化
	for (int i = 0; i < LANE_MAX; i++)
	{
		g_Lane[i].LaneNumber = -3 + i + 1;	//初期レーン
		g_Lane[i].pos	= D3DXVECTOR2(CENTER_X+(g_Lane[i].LaneNumber*LANE_SIZE_X), CENTER_Y);	//位置
		g_Lane[i].size	= D3DXVECTOR2(LANE_DRAW_SIZE_X, LANE_DRAW_SIZE_Y);	//サイズ
		g_Lane[i].uv	= D3DXVECTOR2(0.0f, 0.0f);					//uv
		g_Lane[i].alpha = 0.3f;
	}
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitLane(void)
{
	g_TextureLane = NULL;
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateLane(void)
{
	PLAYER* pPlayer = GetPlayer();
	for (int i = 0; i < LANE_MAX; i++)
	{
		if (pPlayer->NowLane == g_Lane[i].LaneNumber)
		{	g_Lane[i].alpha = 0.9f;		}
		else
		{	g_Lane[i].alpha = 0.5f;		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawLane(void)
{
	//レーン描画
	for (int i = 0; i < LANE_MAX; i++)
	{
		DrawSpriteColor(g_TextureLane, g_Lane[i].pos.x, g_Lane[i].pos.y, g_Lane[i].size.x, g_Lane[i].size.y,	
			0.0f, 0.0f, 1.0f, 1.0f, D3DXCOLOR(1.0, 1.0, 1.0, g_Lane[i].alpha));
	}
}

//=============================================================================
// ゲッター
//=============================================================================
LANE* GetLane(void)
{
	return &g_Lane[0];
}